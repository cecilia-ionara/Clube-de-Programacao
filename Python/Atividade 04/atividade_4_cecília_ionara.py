# -*- coding: utf-8 -*-
"""Atividade 4 - Cecília Ionara.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EraInSbFpHBHfCjqpdBR8DqgMQQWZ75e

Cecília Ionara Pinheiro de Araújo

1. Listas e tuplas 1.1 Crie uma lista de compras onde o usuário pode adicionar, remover ou listar todos os produtos
em sua lista. O programa deve continuar rodando até que o usuário decida sair.
Ficará opcional do aluno em decidir se irá criar uma lista padrão com produtos já cadastrados.
Caso opte por esta alternativa, os itens não poderão ser perdidos, ou seja, devem voltar para a
lista padrão, independente da posição/índice
"""

lista_compras = []

while True:
    print("\n===== MENU =====")
    print("1. Adicionar produto")
    print("2. Remover produto")
    print("3. Listar produtos")
    print("4. Sair")

    opcao = input("Escolha uma opção (1-4): ")

    if opcao == "1":
        produto = input("Digite o nome do produto para adicionar: ")
        if produto not in lista_compras:
            lista_compras.append(produto)
            print(f"'{produto}' foi adicionado à lista.")
        else:
            print(f"'{produto}' já está na lista.")

    elif opcao == "2":
        produto = input("Digite o nome do produto para remover: ")
        if produto in lista_compras:
            lista_compras.remove(produto)
            print(f"'{produto}' foi removido da lista.")
        else:
            print(f"'{produto}' não está na lista.")

    elif opcao == "3":
        if lista_compras:
            print("\nProdutos na sua lista:")
            for i, item in enumerate(lista_compras, start=1):
                print(f"{i}. {item}")
        else:
            print("Sua lista está vazia.")

    elif opcao == "4":
        print("Saindo do programa. Até logo!")
        break

    else:
        print("Opção inválida. Tente novamente.")

"""1.2 Um professor decidiu armazenar as notas de uma prova de seus alunos em uma lista. Calcule
a média, e indique quais são as menores e maiores notas, e quantos alunos ficaram com
vermelho (nota menor que 5).
"""

notas = []

while True:
    entrada = input("Digite a nota do aluno (ou 'sair' para finalizar): ")
    if entrada.lower() == 'sair':
        break
    else:
        nota = float(entrada)
        if 0 <= nota <= 10:
            notas.append(nota)
        else:
            print("Nota inválida! Digite um valor entre 0 e 10.")

# Verificações após o fim da entrada de notas
if notas:
    media = sum(notas) / len(notas)
    menor_nota = min(notas)
    maior_nota = max(notas)
    alunos_vermelho = sum(1 for nota in notas if nota < 5)

    print("\n===== Resultados =====")
    print(f"Notas inseridas: {notas}")
    print(f"Média da turma: {media:.2f}")
    print(f"Menor nota: {menor_nota}")
    print(f"Maior nota: {maior_nota}")
    print(f"Alunos com nota vermelha (menor que 5): {alunos_vermelho}")
else:
    print("Nenhuma nota foi inserida.")

"""1.3 Dada uma tupla de coordenadas (x, y), verifique em qual quadrante do plano cartesiano ela
se encontra, ou se está sobre um dos eixos.
"""

x = float(input("Digite o valor de x: "))
y = float(input("Digite o valor de y: "))

coordenada = (x, y)

if x == 0 and y == 0:
    print("A coordenada está na origem.")
elif x == 0:
    print("A coordenada está sobre o eixo Y.")
elif y == 0:
    print("A coordenada está sobre o eixo X.")
elif x > 0 and y > 0:
    print("A coordenada está no primeiro quadrante.")
elif x < 0 and y > 0:
    print("A coordenada está no segundo quadrante.")
elif x < 0 and y < 0:
    print("A coordenada está no terceiro quadrante.")
elif x > 0 and y < 0:
    print("A coordenada está no quarto quadrante.")

"""1.4 Dada uma tupla com nomes ou palavras pré-inseridos, o usuário deverá digitar um
nome/palavra, e o programa deverá verificar se ele existe na tupla. Caso sim, retorne sua
posição.

"""

palavras = ("banana", "maçã", "laranja", "uva", "melancia")

busca = input("Digite uma palavra para buscar na tupla: ").strip().lower()

if busca in palavras:
    posicao = palavras.index(busca)
    print(f"A palavra '{busca}' foi encontrada na posição {posicao}.")
else:
    print(f"A palavra '{busca}' não está na tupla.")

"""2.1 Dadas dois sets contendo números (int e/ou float), use conjuntos para encontrar os números
em comum entre elas.

"""

conjunto1 = {1, 2.5, 3, 4, 7}
conjunto2 = {3, 4, 5.5, 6, 7}

comum = conjunto1.intersection(conjunto2)

print("Números em comum entre os dois conjuntos:", comum)

"""2.2 Em uma pesquisa sobre a preferência de filmes, os seguintes dados na tabela foram
coletados. Crie um set para cada linha e responda às seguintes perguntas:
Gêneros de filme Quantas pessoas gostam
Comédia 33
Ação e comédia 10
Nenhum dos citados 28
a) Quantas pessoas gostam apenas de comédia?
b) Quantas pessoas gostam apenas de ação?
"""

# Pessoas que gostam de comédia (33)
comedia = set(range(1, 34))

# Pessoas que gostam de ação e comédia (10)
acao_e_comedia = set(range(1, 11))

# a) Pessoas que gostam apenas de comédia:
apenas_comedia = comedia - acao_e_comedia
print("a) Pessoas que gostam apenas de comédia:", len(apenas_comedia))

# b) Pessoas que gostam apenas de ação:
total_pessoas = 61

apenas_acao = total_pessoas - len(comedia) - 28
print("b) Pessoas que gostam apenas de ação:", apenas_acao)

"""2.3 Aproveitando-se da questão 1.1, crie um dicionário com os produtos e os seus respectivos
preços. Depois calcule o valor total.
Caso seja de interesse do aluno, os produtos poderão ser organizados por categorias. Nesta
aplicação, o valor total deverá ser por categoria.
Exemplo de dicionário com categorias:
estoque = {
"roupa": {"camisa": 10, "shorts": 40},
"eletrônicos": {"fone": 50, "mouse": 30}
"""

estoque = {
    "roupa": {"camisa": 10, "shorts": 40},
    "eletrônicos": {"fone": 50, "mouse": 30},
    "alimentos": {"arroz": 20, "feijão": 15}
}

total_geral = 0
for categoria, produtos in estoque.items():
    total_categoria = sum(produtos.values())
    print(f"Total da categoria '{categoria}': R$ {total_categoria:.2f}")
    total_geral += total_categoria

print(f"\nValor total do estoque: R$ {total_geral:.2f}")

"""2.4 Uma loja de eletrônicos está fazendo o controle de estoque utilizando dicionários em Python.
Analise o código abaixo e responda as questões.
a) Um cliente quer saber o preço do notebook. Acesse e imprima o seu valor.
b) Para fins de contabilidade, realize a soma dos preços de todos os produtos de cada
categoria.
c) Com a nova chegada de estoque, novos produtos precisam ser adicionados no sistema.
Adicione um novo produto à categoria “eletrônicos”.
d) Um produto saiu do estoque na categoria “acessórios”. Remova-o do dicionário.
Lembrete: o produto saiu de estoque, mas não deixou de ser vendido pela loja, ou seja a
qualquer momento pode ter reposição. Encontre uma maneira para que o produto não
seja perdido para sempre, e possa ser reutilizado depois.
"""

lojas = {
    "shopping center": {
        "lojas": [
            {
                "nome": "TechStore",
                "produtos": {
                    "eletrônicos": [("smartphone", 1200), ("notebook", 3500)],
                    "acessórios": [("fone", 150), ("capa", 50)]
                }
            }
        ]
    }
}

# Acessar os produtos
produtos = lojas["shopping center"]["lojas"][0]["produtos"]

# a) Imprimir o preço do notebook
eletronicos = produtos["eletrônicos"]
preco_notebook = None
for produto, preco in eletronicos:
    if produto == "notebook":
        preco_notebook = preco
        break
print("Preço do notebook:", preco_notebook)

# b) Somar os preços de todos os produtos por categoria
soma_categorias = {}
for categoria, lista_produtos in produtos.items():
    soma = sum(preco for _, preco in lista_produtos)
    soma_categorias[categoria] = soma
print("Soma dos preços por categoria:", soma_categorias)

# c) Adicionar novo produto à categoria "eletrônicos"
produtos["eletrônicos"].append(("tablet", 2000))
print("Eletrônicos atualizados:", produtos["eletrônicos"])

# d) Remover um produto da categoria "acessórios" e guardar para possível reutilização
estoque_temporario = []
acessorios = produtos["acessórios"]
for i, (produto, preco) in enumerate(acessorios):
    if produto == "fone":
        estoque_temporario.append(acessorios.pop(i))
        break
print("Acessórios após remoção:", produtos["acessórios"])
print("Estoque temporário:", estoque_temporario)